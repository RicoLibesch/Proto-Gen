
# Stages der pipeline (Build zum bauen der Anwendung)
stages:
  - test
  - build
  - deploy

variables:

  BACKEND_IMAGE_NAME: "protogen_backend_node"
  DB_IMAGE_NAME: "protogen_backend_db"
  FRONTEND_IMAGE_NAME: "protogen_frontend_next"



test-app-node:
  stage: test
  image: node:alpine
  tags:
    - protogen-runner-v2
  script:
    - cd backend
    - npm install
    - npm run test/ci

doc-app-node:
  stage: test
  image: node:alpine
  tags:
    - protogen-runner-v2
  script:
    - cd backend
    - npm install
    - npm run doc

lint-app-node:
  stage: test
  image: node:alpine
  tags:
    - protogen-runner-v2
  script:
    - echo "lint"
  #  - cd backend
  #  - npm install
  #  - npm run lint

test-app-next:
  stage: test
  image: node:alpine
  tags:
    - protogen-runner-v2
  script:
    - echo "test next"
    #- echo ${TEST_AUTHCONTROLLER} > authController.ts
    #- mv -f authController.ts proto-gen/backend/src/controllers/authController.ts
    #- npm install
    #- npm run test/ci //Muss noch im Frontend installiert werden die packages etc.

doc-app-next:
  stage: test
  image: node:alpine
  tags:
    - protogen-runner-v2
  script: 
    - echo "doc"
    #- npm install
    #- npm run doc

lint-app-next:
  stage: test
  image: node:alpine
  tags:
    - protogen-runner-v2
  script:
    - npm install
    - npm run lint

#---------------------- BUILD


build-image-backend:
  stage: build
  needs:
    - job: test-app-node
    - job: doc-app-node
    - job: lint-app-node
  tags:
    - protogen-runner-v2
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
     --context $CI_PROJECT_DIR/backend
     --dockerfile $CI_PROJECT_DIR/backend/Dockerfile
     --destination "${CI_REGISTRY_IMAGE}/${BACKEND_IMAGE_NAME}:${CI_COMMIT_TAG}"
  allow_failure: True


build-image-db:
  stage: build
  tags:
    - protogen-runner-v2
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
     --context $CI_PROJECT_DIR/database
     --dockerfile $CI_PROJECT_DIR/database/Dockerfile
     --destination "${CI_REGISTRY_IMAGE}/${DB_IMAGE_NAME}:${CI_COMMIT_TAG}"
  allow_failure: True


build-image-frontend:
  stage: build
  needs:
    - job: test-app-next
    - job: doc-app-next
    - job: lint-app-next
  tags:
    - protogen-runner-v2
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
     --context $CI_PROJECT_DIR/
     --dockerfile $CI_PROJECT_DIR/Dockerfile
     --destination "${CI_REGISTRY_IMAGE}/${FRONTEND_IMAGE_NAME}:${CI_COMMIT_TAG}"
  allow_failure: True


deploy-stack-dev:
  stage: deploy
  needs: 
    - job: build-image-backend
    - job: build-image-db
    - job: build-image-frontend
  tags: 
    - protogen-runner-v2
  image:
    name: alpine:latest
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 400 ~/.ssh
    - echo "$SSH_PRIVATE_KEY_DEV" | ssh-add - 
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - cd ..
  script:
    - ssh -p22 ${SSH_USER}@${SSH_HOSTNAME_DEV} 'whoami && echo success'
    #- ssh -p22 ${SSH_USER}@${SSH_HOSTNAME_DEV} 'rm -rf /home/fsmni/proto-gen'
    #- scp -r proto-gen ${SSH_USER}@${SSH_HOSTNAME_DEV}:/home/fsmni/
    #- ssh-add <(echo "$SSH_PRIVATE_KEY_DEV")
    #- ssh -p22 ${SSH_USER}@${SSH_HOSTNAME_DEV} 'cd /home/fsmni/prot-gen && sudo docker compose up -d'
  #only:
    #- develop






